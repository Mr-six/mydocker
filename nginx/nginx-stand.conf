# 全局设置

#main

# user 来指定Nginx Worker进程运行用户以及用户组，默认由nobody账号运行

#user nobody nobody;

# worker_processes 来指定了Nginx要开启的子进程数。每个Nginx进程平均耗费10M~12M内存。根据经验，一般指定1个进程就足够了，如果是多核CPU，建议指定和CPU的数量一样的进程数即可

worker_processes 1;

# 来定义全局错误日志文件。日志输出级别有debug、info、notice、warn、error、crit可供选择，其中，debug输出日志最为最详细，而crit输出日志最少

error_log /usr/local/var/log/nginx/error.log notice;

# pid 来指定进程id的存储文件位置
pid /usr/local/var/run/nginx/nginx.pid;

# worker_rlimit_nofile 来指定一个nginx进程可以打开的最多文件描述符数目，这里是65535，需要使用命令“ulimit -n 65535”来设置。

worker_rlimit_nofile 1024;

# events模块来用指定nginx的工作模式和工作模式及连接数上限

events {
    # use 用来指定Nginx的工作模式。Nginx支持的工作模式有select、poll、kqueue、epoll、rtsig和/dev/poll。其中select和poll都是标准的工作模式，kqueue和epoll是高效的工作模式，不同的是epoll用在Linux平台上，而kqueue用在BSD系统中，因为Mac基于BSD,所以Mac也得用这个模式，对于Linux系统，epoll工作模式是首选。

    use epoll; 

    # worker_connections 用于定义Nginx每个进程的最大连接数，即接收前端的最大请求数，默认是1024。最大客户端连接数由worker_processes和worker_connections决定，即Max_clients = worker_processes * worker_connections，在作为反向代理时，Max_clients变为：Max_clients = worker_processes * worker_connections / 4

    worker_connections  1024;
}

# http模块 http模块可以说是最核心的模块了，它负责HTTP服务器相关属性的配置

http {
    # 用来设定文件的mime类型,类型在配置文件目录下的mime.type文件定义，来告诉nginx来识别文件类型。

    include mime.types;

    # 设定了默认的类型为二进制流，也就是当文件类型未定义时使用这种方式，例如在没有配置asp的locate 环境时，Nginx是不予解析的，此时，用浏览器访问asp文件就会出现下载窗口了。

    default_type application/octet-stream;

    # 用于设置日志的格式，和记录哪些参数，这里设置为main，刚好用于access_log来纪录这种类型。

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # 用来纪录每次的访问日志的文件地址，后面的main是日志的格式样式，对应于log_format的main。

    access_log /usr/local/var/log/nginx/access.log  main;

    # 用于开启高效文件传输模式。将tcp_nopush和tcp_nodelay两个指令设置为on用于防止网络阻塞。

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;

    # 设置客户端连接保持活动的超时时间。在超过这个时间之后，服务器会关闭该连接。
    
    keepalive_timeout 10;

    # upstream 模块负责负载均衡模块，通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡

    upstream myset.com {
        ip_hash;
        server 192.168.12.1:80;
        server 192.168.12.2:80 down;
        server 192.168.12.3:8080  max_fails=3  fail_timeout=20s;
        server 192.168.12.4:8080;
    }

    # server模块  server模块是http的子模块，它用来定一个虚拟主机，我们先讲最基本的配置，这些在后面再讲。我们看一下一个简单的server是如何做的

    # 主机设置

    server  {

        # listen 用于指定虚拟主机的服务端口

        listen 8080;

        # server_name 用来指定IP地址或者域名，多个域名之间用空格分开

        server_name localhost 192.168.12.10 www.test.com;

        # root 表示在这整个server虚拟主机内，全部的root web根目录。注意要和locate {}下面定义的区分开来

        root   /Users/usr/www;

        # index 全局定义访问的默认首页地址。注意要和locate {}下面定义的区分开来

        index  index.html; 

        # charset 用于设置网页的默认编码格式
        charset utf-8;

        # access_log 用来指定此虚拟主机的访问日志存放路径，最后的main用于指定访问日志的输出格式

        access_log  usr/local/var/log/host.access.log  main;
        error_log  usr/local/var/log/host.error.log  error;

        # location模块是nginx中用的最多的，也是最重要的模块了，什么负载均衡啊、反向代理啊、虚拟域名啊都与它相关
        # location / 表示匹配访问根目录

        location / {
            # root 指令用于指定访问根目录时，虚拟主机的web目录，这个目录可以是相对路径（相对路径是相对于nginx的安装目录）,也可以是绝对路径

            root   /Users/yangyi/www;

            # index 用于设定我们只输入域名后访问的默认首页地址，有个先后顺序：index.php index.html index.htm，如果没有开启目录浏览权限，又找不到这些默认首页，就会报403错误

            index  index.php index.html index.htm;
        }
    }
    server  {
        ....
        location {
            ....
        }
    }
    ....
}
